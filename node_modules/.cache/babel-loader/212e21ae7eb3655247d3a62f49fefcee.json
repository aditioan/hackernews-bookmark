{"ast":null,"code":"import _toConsumableArray from \"/Users/aditioan/Documents/Goingmerry/hackernews-client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/aditioan/Documents/Goingmerry/hackernews-client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ADD_BOOKMARK, DELETE_BOOKMARK } from \"../constants/action-types\";\nvar initialState = {\n  bookmarkLists: []\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_BOOKMARK:\n      return _objectSpread({}, state, {\n        bookmarkLists: _toConsumableArray(state.bookmarkLists).concat([action.payload])\n      });\n\n    case DELETE_BOOKMARK:\n      console.log(action.data);\n      return state.bookmarkLists.filter(function (item) {\n        return item !== action.data;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/aditioan/Documents/Goingmerry/hackernews-client/src/reducers/index.js"],"names":["ADD_BOOKMARK","DELETE_BOOKMARK","initialState","bookmarkLists","rootReducer","state","action","type","payload","console","log","data","filter","item"],"mappings":";;AAAA,SAASA,YAAT,EAAuBC,eAAvB,QAA8C,2BAA9C;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE;AADI,CAArB;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,YAAL;AACE,+BAAYK,KAAZ;AAAmBF,QAAAA,aAAa,qBAAME,KAAK,CAACF,aAAZ,UAA2BG,MAAM,CAACE,OAAlC;AAAhC;;AACF,SAAKP,eAAL;AACCQ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACK,IAAnB;AACC,aAAON,KAAK,CAACF,aAAN,CAAoBS,MAApB,CAA2B,UAACC,IAAD;AAAA,eAAUA,IAAI,KAAKP,MAAM,CAACK,IAA1B;AAAA,OAA3B,CAAP;;AACF;AACE,aAAON,KAAP;AAPJ;AASD,CAVD;;AAYA,eAAeD,WAAf","sourcesContent":["import { ADD_BOOKMARK, DELETE_BOOKMARK } from \"../constants/action-types\";\n\nconst initialState = {\n  bookmarkLists: []\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_BOOKMARK:\n      return { ...state, bookmarkLists: [...state.bookmarkLists, action.payload] };\n    case DELETE_BOOKMARK:\n    \tconsole.log(action.data);\n      return state.bookmarkLists.filter((item) => item !== action.data);\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}