{"version":3,"sources":["components/App.js","reducers/index.js","constants/action-types.js","store/index.js","actions/index.js","serviceWorker.js","index.js"],"names":["Component","initialState","bookmarkLists","rootReducer","state","arguments","length","undefined","action","type","Object","objectSpread","toConsumableArray","concat","payload","filter","item","id","store","createStore","DEFAULT_USER","SORTS","NONE","list","ID","sortBy","AUTHOR","TYPE","TIME","TITLE","TEXT","SCORE","URL","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_isMounted","results","usernameSearch","username","totalBookmarks","error","isLoading","sortKey","isSortReverse","needsToGetUserData","bind","assertThisInitialized","setUserPost","fetchUserData","fetchUserPost","onSearchChange","onSearchSubmit","addBookmark","deleteBookmark","result","_this2","submitted","map","postID","_this3","setState","axios","then","data","catch","_this4","deleted","countBookmarks","getState","event","target","value","preventDefault","post","alert","dispatch","bookmark","window","confirm","scroll","top","left","behavior","_this$state","react_default","a","createElement","className","App_BookmarkLists","App_Submit","onChange","onSubmit","App_Table","ButtonWithLoading","onClick","backToTop","href","Submit","_ref","children","placeholder","Table","_this5","onSort","_this$props","_this$state2","sortedList","reverseSortedList","reverse","style","width","App_Sort","activeSortKey","key","dist_default","unix","time","url","title","text","score","App_Button","BookmarkLists","_this6","_this$state3","by","Sort","_ref2","sortClass","classNames","button-active","Button","_ref3","_ref3$className","Loading","_ref4","rest","objectWithoutProperties","App_Loading","Boolean","location","hostname","match","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0d9576fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport { sortBy } from 'lodash';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { addBookmark, deleteBookmark } from \"../actions/index\";\nimport store from \"../store/index\";\nimport './App.css';\n\nconst DEFAULT_USER = 'ytrash';\n\nconst SORTS = {\n  NONE: list => list,\n  ID: list => sortBy(list, 'id'),\n  AUTHOR: list => sortBy(list, 'by'),\n  TYPE: list => sortBy(list, 'type'),\n  TIME: list => sortBy(list, 'time'),\n  TITLE: list => sortBy(list, 'title'),\n  TEXT: list => sortBy(list, 'text'),\n  SCORE: list => sortBy(list, 'score'),\n  URL: list => sortBy(list, 'url'),\n};\n\nclass App extends Component {\n  _isMounted = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      results: [],\n      usernameSearch: DEFAULT_USER,\n      username: DEFAULT_USER,\n      totalBookmarks: 0,\n      error: null,\n      isLoading: false,\n      sortKey: 'NONE',\n      isSortReverse: false,\n    };\n\n    this.needsToGetUserData = this.needsToGetUserData.bind(this);\n    this.setUserPost = this.setUserPost.bind(this);\n    this.fetchUserData = this.fetchUserData.bind(this);\n    this.fetchUserPost = this.fetchUserPost.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.addBookmark = this.addBookmark.bind(this);\n    this.deleteBookmark = this.deleteBookmark.bind(this);\n  }\n\n  needsToGetUserData(username) {\n    return this.state.usernameSearch !== username;\n  }\n\n  setUserPost(result) {\n    const { submitted } = result;\n    submitted.map((postID) =>\n        this.fetchUserPost(postID)\n      );\n  }\n\n  fetchUserData(username) {\n    this.setState({ isLoading: true });\n    this.setState({ results: [] });\n\n    axios(`https://hacker-news.firebaseio.com/v0/user/${username}.json`)\n      .then(result => this.setUserPost(result.data))\n      .catch(error => this._isMounted && this.setState({ error }));\n  }\n\n  fetchUserPost(postID) {\n    this.setState({ isLoading: true });\n    this.setState({ error: null });\n\n    axios(`https://hacker-news.firebaseio.com/v0/item/${postID}.json`)\n      .then(result => {\n        if (result.data.deleted === undefined) {\n          this.setState({results: this.state.results.concat(result.data), isLoading: false})\n        }\n      })\n      .catch(error => this._isMounted && this.setState({ error }));\n  }\n\n  countBookmarks(data) {\n    this.setState({ totalBookmarks: data.bookmarkLists.length });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    const { username } = this.state;\n    this.countBookmarks(store.getState());\n    this.fetchUserData(username);\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onSearchChange(event) {\n    this.setState({ username: event.target.value });\n  }\n\n  onSearchSubmit(event) {\n    const { username } = this.state;\n\n    if (this.needsToGetUserData(username)) {\n      this.setState({ usernameSearch: username });\n      this.fetchUserData(username);\n    }\n\n    event.preventDefault();\n  }\n\n  addBookmark(post) {\n    let currentData = store.getState();\n    let duplicate = currentData.bookmarkLists.filter((item) => {\n      return item.id === post.id;\n    });\n    if (duplicate.length > 0) {\n      alert('This data has already been added in Bookmark list!');\n    } else {\n      store.dispatch(addBookmark(post));\n      this.setState({ totalBookmarks: this.state.totalBookmarks + 1 });\n    }\n  }\n\n  deleteBookmark(bookmark) {\n    if (window.confirm(\"Are you sure to delete this data?\")) {\n      store.dispatch(deleteBookmark(bookmark));\n      this.setState({ totalBookmarks: this.state.totalBookmarks - 1 });\n    }\n  }\n\n  backToTop() {\n    window.scroll({\n      top: 0, \n      left: 0, \n      behavior: 'smooth' \n    });\n  }\n\n  render() {\n    const {\n      username,\n      results,\n      totalBookmarks,\n      error,\n      isLoading\n    } = this.state;\n    let list = results || [];\n\n    return (\n      <div className=\"page\">\n        <h1><span className=\"header-title\">HackerNews Bookmark</span> <span className=\"right-header\">{totalBookmarks} Bookmarks</span></h1>\n        <BookmarkLists\n            deleteBookmark={this.deleteBookmark}></BookmarkLists>\n        <div className=\"interactions\">\n          <h2><u>User Posts</u></h2>\n        </div>\n        <div className=\"interactions\">\n          <Submit\n            value={username}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n            Submit\n          </Submit>\n        </div>\n        { error\n          ? <div className=\"interactions\">\n            <p>Something went wrong !</p>\n          </div>\n          : <Table\n            list={list}\n            addBookmark={this.addBookmark}\n          />\n        }\n        <div className=\"interactions\">\n          <ButtonWithLoading\n            isLoading={isLoading}\n            onClick={this.backToTop}>\n            Back to Top\n          </ButtonWithLoading>\n          <br />\n          <br />\n          <span>&copy; 2018 <a href=\"https://www.linkedin.com/in/aditio-agung-nugroho-9805297b/\">Aditio Agung Nugroho</a></span>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Submit = ({\n  value,\n  onChange,\n  onSubmit,\n  children\n}) =>\n  <form onSubmit={onSubmit}>\n    Input HackerNews Username : \n    <input\n      type=\"text\"\n      placeholder=\"HackerNews username\"\n      value={value}\n      onChange={onChange}\n    />\n    <button type=\"submit\">\n      {children}\n    </button>\n  </form>\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sortKey: 'TITLE',\n      isSortReverse: false,\n    };\n\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\n    this.setState({ sortKey, isSortReverse });\n  }\n\n  render() {\n    const {\n      list,\n      addBookmark\n    } = this.props;\n\n    const {\n      sortKey,\n      isSortReverse,\n    } = this.state;\n\n    const sortedList = SORTS[sortKey](list);\n    const reverseSortedList = isSortReverse\n      ? sortedList.reverse()\n      : sortedList;\n\n    return (\n      <div className=\"table\">\n        <div className=\"table-header\">\n          <span style={{ width: '5%' }}>\n            <Sort\n              sortKey={'ID'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>ID</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '5%' }}>\n            <Sort\n              sortKey={'TYPE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>Type</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'TIME'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>Time</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '18%' }}>\n            <Sort\n              sortKey={'TITLE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>Title</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '25%' }}>\n            <Sort\n              sortKey={'TEXT'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>Text</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '5%' }}>\n            <Sort\n              sortKey={'SCORE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>Score</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '25%' }}>\n            <Sort\n              sortKey={'URL'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>URL</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '7%' }}>\n            <strong>Bookmarks</strong>\n          </span>\n        </div>\n        {reverseSortedList.map(item =>\n          <div key={item.id} className=\"table-row\">\n            <span style={{ width: '5%' }}>\n              {item.id}\n            </span>\n            <span style={{ width: '5%' }}>\n              {item.type}\n            </span>\n            <span style={{ width: '10%' }}>\n              <Moment unix>{item.time}</Moment>\n            </span>\n            <span style={{ width: '18%' }}>\n              <a href={item.url}>{item.title}</a>\n            </span>\n            <span style={{ width: '25%' }}>\n              {item.text}\n            </span>\n            <span style={{ width: '5%' }}>\n              {item.score}\n            </span>\n            <span style={{ width: '25%' }}>\n              {item.url}\n            </span>\n            <span style={{ width: '7%' }}>\n              <Button\n                className=\"button-info\"\n                onClick={() => addBookmark(item)}>\n                Add\n              </Button>\n            </span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nclass BookmarkLists extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sortKey: 'TITLE',\n      isSortReverse: false,\n    };\n\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\n    this.setState({ sortKey, isSortReverse });\n  }\n\n  render() {\n    const {\n      deleteBookmark\n    } = this.props;\n\n    const {\n      sortKey,\n      isSortReverse,\n    } = this.state;\n\n    let list = store.getState();\n    const sortedList = SORTS[sortKey](list.bookmarkLists);\n    const reverseSortedList = isSortReverse\n      ? sortedList.reverse()\n      : sortedList;\n\n    return (\n      <div className=\"table\">\n        <div className=\"table-header\">\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'ID'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>ID</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'TYPE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>Type</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '30%' }}>\n            <Sort\n              sortKey={'TITLE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>Title</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'AUTHOR'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>AUTHOR</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '35%' }}>\n            <Sort\n              sortKey={'URL'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              <strong>URL</strong>\n            </Sort>\n          </span>\n          <span style={{ width: '5%' }}>\n            <strong>ACTION</strong>\n          </span>\n        </div>\n        {reverseSortedList.map(item =>\n          <div key={item.id} className=\"table-row\">\n            <span style={{ width: '10%' }}>\n              {item.id}\n            </span>\n            <span style={{ width: '10%' }}>\n              {item.type}\n            </span>\n            <span style={{ width: '30%' }}>\n              <a href={item.url}>{item.title}</a>\n            </span>\n            <span style={{ width: '10%' }}>\n              {item.by}\n            </span>\n            <span style={{ width: '35%' }}>\n              {item.url}\n            </span>\n            <span style={{ width: '5%' }}>\n              <Button\n                className=\"button-danger\"\n                onClick={() => deleteBookmark(item)}\n              >\n                Delete\n              </Button>\n            </span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst Sort = ({\n  sortKey,\n  activeSortKey,\n  onSort,\n  children\n}) => {\n  const sortClass = classNames(\n    'button-inline',\n    { 'button-active': sortKey === activeSortKey }\n  );\n\n  return (\n    <Button\n      onClick={() => onSort(sortKey)}\n      className={sortClass}\n    >\n      {children}\n    </Button>\n  );\n}\n\nconst Button = ({\n  onClick,\n  className = '',\n  children,\n}) =>\n  <button\n    onClick={onClick}\n    className={className}\n    type=\"button\"\n  >\n    {children}\n  </button>\n\nconst Loading = () =>\n  <div>Loading ...</div>\n\nconst withLoading = (Component) => ({ isLoading, ...rest }) =>\n  isLoading\n    ? <Loading />\n    : <Component { ...rest } />\n\nconst ButtonWithLoading = withLoading(Button);\n\nexport {\n  Button,\n  Submit,\n  Table,\n};\n\nexport default App;","import { ADD_BOOKMARK, DELETE_BOOKMARK } from \"../constants/action-types\";\n\nconst initialState = {\n  bookmarkLists: []\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_BOOKMARK:\n      return { ...state, bookmarkLists: [...state.bookmarkLists, action.payload] };\n    case DELETE_BOOKMARK:\n      return { ...state, bookmarkLists: state.bookmarkLists.filter((item) => item.id !== action.payload.id) };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","export const ADD_BOOKMARK = \"ADD_BOOKMARK\";\nexport const DELETE_BOOKMARK = \"DELETE_BOOKMARK\";","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import { ADD_BOOKMARK, DELETE_BOOKMARK } from \"../constants/action-types\";\n\nexport const addBookmark = bookmark => ({ \n\ttype: ADD_BOOKMARK,\n\tpayload: bookmark \n});\n\nexport const deleteBookmark = bookmark => ({ \n\ttype: DELETE_BOOKMARK,\n\tpayload: bookmark \n});","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}